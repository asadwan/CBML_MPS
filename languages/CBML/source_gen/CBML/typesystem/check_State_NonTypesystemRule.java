package CBML.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class check_State_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_State_NonTypesystemRule() {
  }
  public void applyRule(final SNode state, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(SNodeOperations.getParent(state), CONCEPTS.Statemachine$lq), LINKS.state$sD1P)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(Objects.equals(it, state)) && Objects.equals(SPropertyOperations.getString(it, PROPS.name$MnvL), SPropertyOperations.getString(state, PROPS.name$MnvL));
      }
    })) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(state, "duplicate name " + SPropertyOperations.getString(state, PROPS.name$MnvL), "r:d7c4870a-d11b-4c84-a847-07fb0ad64906(CBML.typesystem)", "8266688392208156466", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.State$rO;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Statemachine$lq = MetaAdapterFactory.getConcept(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3dc3b400L, "CBML.structure.Statemachine");
    /*package*/ static final SConcept State$rO = MetaAdapterFactory.getConcept(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3dc3b432L, "CBML.structure.State");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink state$sD1P = MetaAdapterFactory.getContainmentLink(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3dc3b400L, 0x7e37d81f3dc3b435L, "state");
  }
}
