package CBML.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Adaptation_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new BasicContext_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new BasicState_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new BasicStatemachine_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new ContextAndContextExpression_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new ContextAwareState_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new ContextEqualsContextExpression_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new ContextModel_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new ContextPropertyExpression_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new ContextRef_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new ContextTypeValueExpression_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new DerivedContext_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new Event_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new Model_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new PrimitiveType_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new Property_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new Provider_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new ProviderRef_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new Situation_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new SituationRef_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new StaticContext_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new SuperState_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new SuperStateStatemachine_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new Transition_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new Types_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new UserDefinedType_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new Value_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_0(String editorComponentId) {
    if ("CBML.editor.StatemachineBody".equals(editorComponentId)) {
      return Collections.singletonList(new StatemachineBody());
    }
    return Collections.emptyList();
  }
  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return getDeclaredEC_0(editorComponentId);
      default:
    }
    return Collections.emptyList();
  }


  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new ContextRef_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new Property_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new ProviderRef_SubstituteMenu());
      case 3:
        return Collections.<SubstituteMenu>singletonList(new SituationRef_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3dc3b443L), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3dc95b69L), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3ddf58f2L), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3ddc156eL), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x72b92d4b3e817958L), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3de6231dL), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x72b92d4b3e817953L), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3dc3b3e2L), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x72b92d4b3e817961L), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3dc3b4aeL), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x12e931e70d21d858L), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3dc95b5fL), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3dc3b438L), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3dc3b3ddL), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x72b92d4b3e8f387bL), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3dc3b574L), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3dc3b42aL), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3dc3b4c4L), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3dc3b42fL), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3dc3b4afL), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3dc95b5dL), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3ddc1573L), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3ddc156dL), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3dc3b437L), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x72b92d4b3e92bef4L), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x72b92d4b3e8f3865L), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x72b92d4b3e8f3861L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3dc3b400L)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3dc3b4aeL), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3dc3b574L), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3dc3b4c4L), MetaIdFactory.conceptId(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3dc3b4afL)).seal();
}
