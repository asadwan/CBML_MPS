package CBML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Adaptation;
  private ConceptPresentation props_BasicContext;
  private ConceptPresentation props_BasicState;
  private ConceptPresentation props_BasicStatemachine;
  private ConceptPresentation props_BinaryContextExpression;
  private ConceptPresentation props_CompareContextExpression;
  private ConceptPresentation props_Context;
  private ConceptPresentation props_ContextAndContextExpression;
  private ConceptPresentation props_ContextAwareState;
  private ConceptPresentation props_ContextEqualsContextExpression;
  private ConceptPresentation props_ContextExpression;
  private ConceptPresentation props_ContextModel;
  private ConceptPresentation props_ContextPropertyExpression;
  private ConceptPresentation props_ContextRef;
  private ConceptPresentation props_ContextType;
  private ConceptPresentation props_ContextTypeValueExpression;
  private ConceptPresentation props_DerivedContext;
  private ConceptPresentation props_Event;
  private ConceptPresentation props_GreaterThanContextExpression;
  private ConceptPresentation props_GreaterThanOrEqualsContextExpression;
  private ConceptPresentation props_LessThanContextExpression;
  private ConceptPresentation props_LessThanOrEqualsContextExpression;
  private ConceptPresentation props_Model;
  private ConceptPresentation props_PrimitiveType;
  private ConceptPresentation props_Property;
  private ConceptPresentation props_Provider;
  private ConceptPresentation props_ProviderRef;
  private ConceptPresentation props_Situation;
  private ConceptPresentation props_SituationRef;
  private ConceptPresentation props_State;
  private ConceptPresentation props_Statemachine;
  private ConceptPresentation props_StaticContext;
  private ConceptPresentation props_StringLiteralExpression;
  private ConceptPresentation props_SuperState;
  private ConceptPresentation props_SuperStateStatemachine;
  private ConceptPresentation props_Transition;
  private ConceptPresentation props_Types;
  private ConceptPresentation props_UserDefinedType;
  private ConceptPresentation props_Value;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Adaptation:
        if (props_Adaptation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("state machine for modeling adaptive behavior");
          cpb.rawPresentation("adaptation state machine");
          props_Adaptation = cpb.create();
        }
        return props_Adaptation;
      case LanguageConceptSwitch.BasicContext:
        if (props_BasicContext == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_BasicContext = cpb.create();
        }
        return props_BasicContext;
      case LanguageConceptSwitch.BasicState:
        if (props_BasicState == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_BasicState = cpb.create();
        }
        return props_BasicState;
      case LanguageConceptSwitch.BasicStatemachine:
        if (props_BasicStatemachine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_BasicStatemachine = cpb.create();
        }
        return props_BasicStatemachine;
      case LanguageConceptSwitch.BinaryContextExpression:
        if (props_BinaryContextExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BinaryContextExpression = cpb.create();
        }
        return props_BinaryContextExpression;
      case LanguageConceptSwitch.CompareContextExpression:
        if (props_CompareContextExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_CompareContextExpression = cpb.create();
        }
        return props_CompareContextExpression;
      case LanguageConceptSwitch.Context:
        if (props_Context == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Context = cpb.create();
        }
        return props_Context;
      case LanguageConceptSwitch.ContextAndContextExpression:
        if (props_ContextAndContextExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("&&");
          props_ContextAndContextExpression = cpb.create();
        }
        return props_ContextAndContextExpression;
      case LanguageConceptSwitch.ContextAwareState:
        if (props_ContextAwareState == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ContextAwareState = cpb.create();
        }
        return props_ContextAwareState;
      case LanguageConceptSwitch.ContextEqualsContextExpression:
        if (props_ContextEqualsContextExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("==");
          props_ContextEqualsContextExpression = cpb.create();
        }
        return props_ContextEqualsContextExpression;
      case LanguageConceptSwitch.ContextExpression:
        if (props_ContextExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ContextExpression = cpb.create();
        }
        return props_ContextExpression;
      case LanguageConceptSwitch.ContextModel:
        if (props_ContextModel == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("ContextModel");
          cpb.presentationByName();
          props_ContextModel = cpb.create();
        }
        return props_ContextModel;
      case LanguageConceptSwitch.ContextPropertyExpression:
        if (props_ContextPropertyExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("context propery ");
          props_ContextPropertyExpression = cpb.create();
        }
        return props_ContextPropertyExpression;
      case LanguageConceptSwitch.ContextRef:
        if (props_ContextRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3dc3b4aeL, 0x7e37d81f3dc3b4b6L, "context", "", "");
          props_ContextRef = cpb.create();
        }
        return props_ContextRef;
      case LanguageConceptSwitch.ContextType:
        if (props_ContextType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("context data type");
          props_ContextType = cpb.create();
        }
        return props_ContextType;
      case LanguageConceptSwitch.ContextTypeValueExpression:
        if (props_ContextTypeValueExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("USER DEFINED TYPE VALUE");
          props_ContextTypeValueExpression = cpb.create();
        }
        return props_ContextTypeValueExpression;
      case LanguageConceptSwitch.DerivedContext:
        if (props_DerivedContext == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DerivedContext = cpb.create();
        }
        return props_DerivedContext;
      case LanguageConceptSwitch.Event:
        if (props_Event == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Event = cpb.create();
        }
        return props_Event;
      case LanguageConceptSwitch.GreaterThanContextExpression:
        if (props_GreaterThanContextExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation(">");
          props_GreaterThanContextExpression = cpb.create();
        }
        return props_GreaterThanContextExpression;
      case LanguageConceptSwitch.GreaterThanOrEqualsContextExpression:
        if (props_GreaterThanOrEqualsContextExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation(">=");
          props_GreaterThanOrEqualsContextExpression = cpb.create();
        }
        return props_GreaterThanOrEqualsContextExpression;
      case LanguageConceptSwitch.LessThanContextExpression:
        if (props_LessThanContextExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<");
          props_LessThanContextExpression = cpb.create();
        }
        return props_LessThanContextExpression;
      case LanguageConceptSwitch.LessThanOrEqualsContextExpression:
        if (props_LessThanOrEqualsContextExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<=");
          props_LessThanOrEqualsContextExpression = cpb.create();
        }
        return props_LessThanOrEqualsContextExpression;
      case LanguageConceptSwitch.Model:
        if (props_Model == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Model = cpb.create();
        }
        return props_Model;
      case LanguageConceptSwitch.PrimitiveType:
        if (props_PrimitiveType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PrimitiveType = cpb.create();
        }
        return props_PrimitiveType;
      case LanguageConceptSwitch.Property:
        if (props_Property == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Property = cpb.create();
        }
        return props_Property;
      case LanguageConceptSwitch.Provider:
        if (props_Provider == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Context information provider");
          cpb.presentationByName();
          props_Provider = cpb.create();
        }
        return props_Provider;
      case LanguageConceptSwitch.ProviderRef:
        if (props_ProviderRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3dc3b4c4L, 0x7e37d81f3dc3b4c5L, "provider", "", "");
          props_ProviderRef = cpb.create();
        }
        return props_ProviderRef;
      case LanguageConceptSwitch.Situation:
        if (props_Situation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Situation = cpb.create();
        }
        return props_Situation;
      case LanguageConceptSwitch.SituationRef:
        if (props_SituationRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x1741a61662b2400eL, 0xa2f91c4d5034784dL, 0x7e37d81f3dc3b4afL, 0x7e37d81f3dc3b4b0L, "situation", "", "");
          props_SituationRef = cpb.create();
        }
        return props_SituationRef;
      case LanguageConceptSwitch.State:
        if (props_State == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_State = cpb.create();
        }
        return props_State;
      case LanguageConceptSwitch.Statemachine:
        if (props_Statemachine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Statemachine = cpb.create();
        }
        return props_Statemachine;
      case LanguageConceptSwitch.StaticContext:
        if (props_StaticContext == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_StaticContext = cpb.create();
        }
        return props_StaticContext;
      case LanguageConceptSwitch.StringLiteralExpression:
        if (props_StringLiteralExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StringLiteralExpression");
          props_StringLiteralExpression = cpb.create();
        }
        return props_StringLiteralExpression;
      case LanguageConceptSwitch.SuperState:
        if (props_SuperState == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SuperState = cpb.create();
        }
        return props_SuperState;
      case LanguageConceptSwitch.SuperStateStatemachine:
        if (props_SuperStateStatemachine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SuperStateStatemachine = cpb.create();
        }
        return props_SuperStateStatemachine;
      case LanguageConceptSwitch.Transition:
        if (props_Transition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Transition");
          props_Transition = cpb.create();
        }
        return props_Transition;
      case LanguageConceptSwitch.Types:
        if (props_Types == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("declare types");
          cpb.rawPresentation("Types");
          props_Types = cpb.create();
        }
        return props_Types;
      case LanguageConceptSwitch.UserDefinedType:
        if (props_UserDefinedType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_UserDefinedType = cpb.create();
        }
        return props_UserDefinedType;
      case LanguageConceptSwitch.Value:
        if (props_Value == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Value = cpb.create();
        }
        return props_Value;
    }
    return null;
  }
}
