package CBML.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int Adaptation = 0;
  public static final int BasicContext = 1;
  public static final int BasicState = 2;
  public static final int BasicStatemachine = 3;
  public static final int BinaryContextExpression = 4;
  public static final int CompareContextExpression = 5;
  public static final int Context = 6;
  public static final int ContextAndContextExpression = 7;
  public static final int ContextAwareState = 8;
  public static final int ContextEqualsContextExpression = 9;
  public static final int ContextExpression = 10;
  public static final int ContextModel = 11;
  public static final int ContextPropertyExpression = 12;
  public static final int ContextRef = 13;
  public static final int ContextType = 14;
  public static final int ContextTypeValueExpression = 15;
  public static final int DerivedContext = 16;
  public static final int Event = 17;
  public static final int GreaterThanContextExpression = 18;
  public static final int GreaterThanOrEqualsContextExpression = 19;
  public static final int LessThanContextExpression = 20;
  public static final int LessThanOrEqualsContextExpression = 21;
  public static final int Model = 22;
  public static final int PrimitiveType = 23;
  public static final int Property = 24;
  public static final int Provider = 25;
  public static final int ProviderRef = 26;
  public static final int Situation = 27;
  public static final int SituationRef = 28;
  public static final int State = 29;
  public static final int Statemachine = 30;
  public static final int StaticContext = 31;
  public static final int StringLiteralExpression = 32;
  public static final int SuperState = 33;
  public static final int SuperStateStatemachine = 34;
  public static final int Transition = 35;
  public static final int Types = 36;
  public static final int UserDefinedType = 37;
  public static final int Value = 38;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x1741a61662b2400eL, 0xa2f91c4d5034784dL);
    builder.put(0x7e37d81f3dc3b443L, Adaptation);
    builder.put(0x7e37d81f3dc95b69L, BasicContext);
    builder.put(0x7e37d81f3ddf58f2L, BasicState);
    builder.put(0x7e37d81f3ddc156eL, BasicStatemachine);
    builder.put(0x72b92d4b3e816c36L, BinaryContextExpression);
    builder.put(0x72b92d4b3e817954L, CompareContextExpression);
    builder.put(0x7e37d81f3dc3b403L, Context);
    builder.put(0x72b92d4b3e817958L, ContextAndContextExpression);
    builder.put(0x7e37d81f3de6231dL, ContextAwareState);
    builder.put(0x72b92d4b3e817953L, ContextEqualsContextExpression);
    builder.put(0x72b92d4b3e60d342L, ContextExpression);
    builder.put(0x7e37d81f3dc3b3e2L, ContextModel);
    builder.put(0x72b92d4b3e817961L, ContextPropertyExpression);
    builder.put(0x7e37d81f3dc3b4aeL, ContextRef);
    builder.put(0x72b92d4b3e8f3851L, ContextType);
    builder.put(0x12e931e70d21d858L, ContextTypeValueExpression);
    builder.put(0x7e37d81f3dc95b5fL, DerivedContext);
    builder.put(0x7e37d81f3dc3b438L, Event);
    builder.put(0x72b92d4b3e81795aL, GreaterThanContextExpression);
    builder.put(0x72b92d4b3e81795bL, GreaterThanOrEqualsContextExpression);
    builder.put(0x72b92d4b3e817959L, LessThanContextExpression);
    builder.put(0x72b92d4b3e81795cL, LessThanOrEqualsContextExpression);
    builder.put(0x7e37d81f3dc3b3ddL, Model);
    builder.put(0x72b92d4b3e8f387bL, PrimitiveType);
    builder.put(0x7e37d81f3dc3b574L, Property);
    builder.put(0x7e37d81f3dc3b42aL, Provider);
    builder.put(0x7e37d81f3dc3b4c4L, ProviderRef);
    builder.put(0x7e37d81f3dc3b42fL, Situation);
    builder.put(0x7e37d81f3dc3b4afL, SituationRef);
    builder.put(0x7e37d81f3dc3b432L, State);
    builder.put(0x7e37d81f3dc3b400L, Statemachine);
    builder.put(0x7e37d81f3dc95b5dL, StaticContext);
    builder.put(0x72b92d4b3e817960L, StringLiteralExpression);
    builder.put(0x7e37d81f3ddc1573L, SuperState);
    builder.put(0x7e37d81f3ddc156dL, SuperStateStatemachine);
    builder.put(0x7e37d81f3dc3b437L, Transition);
    builder.put(0x72b92d4b3e92bef4L, Types);
    builder.put(0x72b92d4b3e8f3865L, UserDefinedType);
    builder.put(0x72b92d4b3e8f3861L, Value);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
